import os
import dotenv
import google.generativeai as genai
from reddit_review import fetch_reviews_top
dotenv.load_dotenv()
api_key = os.environ.get("LLM_api_key")


def analyze_product_reviews(api_key, query, max_reviews=10):
    """
    Analyze product reviews using the Gemini API.
    
    Parameters:
        api_key (str): The Gemini API key.
        query (str): The product or business name to analyze.
        max_reviews (int): The maximum number of reviews to analyze.
    
    Returns:
        str: The analysis generated by the Gemini API.
    """
    # Fetch reviews for the query
    top_reviews = fetch_reviews_top(query, max_results=max_reviews)

    # Combine reviews into a single text
    reviews_combined = "\n\n".join(top_reviews)

    if not reviews_combined.strip():
        return "No reviews available to analyze."

    # Configure Gemini client
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-1.5-flash")

    # Generate the task dynamically with a fallback if reviews do not focus on the query
    task_description = f"You are a Customer Sentiment Analyst. Based on the provided reviews, analyze the product '{query}'. If the reviews are not about the product, provide a sentiment analysis based on current market trends and available information about '{query}' in the market. Highlight the strengths and weaknesses of the product, regardless of whether the reviews focus directly on it."

    # Call the Gemini API
    response = model.generate_content(f"{task_description}\n\nReviews:\n{reviews_combined}")

    # Return the response text
    return response.text

query = "ola"
analysis = analyze_product_reviews(api_key, query, max_reviews=10)
